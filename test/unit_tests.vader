# This script contains unit tests for most important 
# functions.

Given (Doc draft example):
  
  1. Section title *TitleTag*

  1.1. Subsection title *SubTitleTag*

  Unnumered section 1 *UnnumeredTag1*

  Unnumered section 2 *UnnumeredTag2*

  #.#. New subsection title *NewSubTitleTag*

  #. New section title *NewSectionTitleTag*

Execute (Find lines with section's titles):
  AssertEqual 2, hp#NextSectionLine(0)
  AssertEqual 4, hp#NextSectionLine(2)
  AssertEqual 6, hp#NextSectionLine(4)
  AssertEqual 8, hp#NextSectionLine(6)
  AssertEqual 10, hp#NextSectionLine(8)
  AssertEqual 12, hp#NextSectionLine(10)

Execute(Extract section number mask):
  AssertEqual '#.', hp#ExtractSectionNumberMask(getline(2))
  AssertEqual '#.#.', hp#ExtractSectionNumberMask(getline(4))
  AssertEqual '', hp#ExtractSectionNumberMask(getline(6))
  AssertEqual '', hp#ExtractSectionNumberMask(getline(8))
  AssertEqual '#.#.', hp#ExtractSectionNumberMask(getline(10))
  AssertEqual '#.', hp#ExtractSectionNumberMask(getline(12))

Execute(Increment number by mask):
  AssertEqual '10.', hp#IncrementNumber('9', '#')
  AssertEqual '2.', hp#IncrementNumber('1.', '3.')
  AssertEqual '1.2.', hp#IncrementNumber('1.1.', '#.#.')
  AssertEqual '2.', hp#IncrementNumber('1.1.', '#.')
  AssertEqual '1.1.', hp#IncrementNumber('1.', '#.#.')

Execute(Increment absent number):
  AssertThrows call hp#IncrementNumber('', '#')

Execute(Extract section names):
  AssertEqual 'Section title', hp#ExtractSectionName(getline(2))
  AssertEqual 'Subsection title', hp#ExtractSectionName(getline(4))
  AssertEqual 'Unnumered section 1', hp#ExtractSectionName(getline(6))
  AssertEqual 'Unnumered section 2', hp#ExtractSectionName(getline(8))
  AssertEqual 'New subsection title', hp#ExtractSectionName(getline(10))
  AssertEqual 'New section title', hp#ExtractSectionName(getline(12))

Execute(Extract section tag):
  AssertEqual 'TitleTag', hp#ExtractSectionTag(getline(2))
  AssertEqual 'SubTitleTag', hp#ExtractSectionTag(getline(4))
  AssertEqual 'UnnumeredTag1', hp#ExtractSectionTag(getline(6))
  AssertEqual 'UnnumeredTag2', hp#ExtractSectionTag(getline(8))
  AssertEqual 'NewSubTitleTag', hp#ExtractSectionTag(getline(10))
  AssertEqual 'NewSectionTitleTag', hp#ExtractSectionTag(getline(12))

Execute(Build sections):
  let expected = [
  \   { 'name': 'Section title', 'number': '1.', 'line': 2, 'level': 1, 'tag': 'TitleTag' },
  \   { 'name': 'Subsection title', 'number': '1.1.', 'line': 4, 'level': 2, 'tag': 'SubTitleTag' },
  \   { 'name': 'Unnumered section 1', 'number': '', 'line': 6 , 'level': 3, 'tag': 'UnnumeredTag1' },
  \   { 'name': 'Unnumered section 2', 'number': '', 'line': 8 , 'level': 3, 'tag': 'UnnumeredTag2' },
  \   { 'name': 'New subsection title', 'number': '1.2.', 'line': 10 , 'level': 2, 'tag': 'NewSubTitleTag' },
  \   { 'name': 'New section title', 'number': '2.', 'line': 12 , 'level': 1, 'tag': 'NewSectionTitleTag' },
  \]
  let actual = hp#BuildSections(1)

  AssertEqual len(expected), len(actual)
  for i in range(len(expected))
    AssertEqual expected[i], actual[i]
  endfor

Execute(Generate string with the content):
  let expected = [
  \ '*CONTENTS*',
  \ '    1. Section title.........................|TitleTag|', 
  \ '        1.1. Subsection title.............|SubTitleTag|',
  \ '             Unnumered section 1........|UnnumeredTag1|',
  \ '             Unnumered section 2........|UnnumeredTag2|',
  \ '        1.2. New subsection title......|NewSubTitleTag|',
  \ '    2. New section title...........|NewSectionTitleTag|',
  \ ]
  let actual = hp#GenerateContentsItems(55, 1)

  AssertEqual len(expected), len(actual)
  for i in range(len(expected))
    AssertEqual expected[i], actual[i]
  endfor
